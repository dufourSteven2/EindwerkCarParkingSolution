

@section scripts{
    <script src="~/Scripts/bootstrap-confirmation.min.js"></script>
    <script src="~/Scripts/vue.js"></script>
    @*<script src="https://cdn.jsdelivr.net/npm/vue"></script>*@
    <script>

        $(function () {
            // JQuery
            //console.log('ready');
        })

        var apiURL = '/api/'

        var app = new Vue({
            el: '#app',
            data: {
                message: 'Loading parkings...',
                parkings: null,
                currentParking: null,
                authors: null,
                editMode: false,
                isEdit: false
            },
            created: function () {
                var self = this;
                this.fetchParkings();
                this.fetchAuthors();
            },


            methods: {
                fetchParkings: function () {
                    self = this;

                    // fetch: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch
                    // backticks: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals
                    fetch(`${apiURL}Parkings`)
                        .then(res => res.json())
                        .then(function (parkings) {
                            parkings.forEach(function (parking, i) {
                                parking.isActive = false;
                            });
                            self.parkings = parkings;
                            self.message = 'Overview'
                            if (self.parkings.length > 0) {
                                self.fetchBookDetails(self.parkings[0]);
                            }
                        })
                        .catch(err => console.error('Fout: ' + err));
                },
                fetchParkingDetails: function (parking) {
                    self = this;
                    var xhr = new XMLHttpRequest()
                    xhr.open('GET', apiURL + 'Parkings/' + parking.Id)
                    xhr.onload = function () {
                        app.currentParking = JSON.parse(xhr.responseText)
                        self.parkings.forEach(function (parking, i) { parking.isActive = false; })
                        parking.isActive = true;
                    }
                    xhr.send()
                },
                getBookClass: function (parking) {
                    if (parking.isActive) return 'list-group-item active';
                    return 'list-group-item';
                },
                //fetchAuthors: function () {
                //    var xhr = new XMLHttpRequest()
                //    var self = this
                //    xhr.open('GET', apiURL + "Authors")
                //    xhr.onload = function () {
                //        self.authors = JSON.parse(xhr.responseText)
                //    }
                //    xhr.send()
                //},
                //changeAuthor: function () {
                //    self = this;
                //},
                toEditMode: function (isEdit) {
                    self = this;
                    this.editMode = true;
                    this.isEdit = isEdit;
                    if (!isEdit) {
                        self.currentParking = { Id: 0, ParkingNaam: '', SoortId: 0, Genre: '', Totaal: '' }
                    }
                },
                save: function () {
                    var self = this

                    // opslaan - ajax
                    var xhr = new XMLHttpRequest()
                    if (self.isEdit) { xhr.open('PUT', apiURL + "Parkings/" + self.currentParking.Id); }
                    else { xhr.open('POST', apiURL + "Parkings"); }
                    var uploadjson = JSON.stringify(self.currentParking);
                    xhr.setRequestHeader("Content-type", "application/json");
                    xhr.send(uploadjson);

                    // GUI Aanpassen
                    // nieuwe auteursnaam ophalen
                    //theAuthor = self.authors.filter(author => (author.Id === self.currentBook.AuthorId))[0];
                    //Vue.set(self.currentBook, 'AuthorName', theAuthor.Name)

                    if (self.isEdit) {
                        // boek updaten in lijst
                        theParking = self.parkings.filter(parking => (parking.Id === self.currentParking.Id))[0];
                        Vue.set(theParking, 'ParkingNaam', this.currentParking.ParkingNaam);
                        //Vue.set(theBook, 'AuthorName', theAuthor.Name);
                        theParking.ParkingNaam = this.currentParking.ParkingNaam;
                        self.editMode = false;
                    } else {
                        // boek toevoegen aan de lijst
                        self.parkings.push(self.currentParking);
                    }
                },
                deleteBook: function () {
                    var self = this;
                    var xhr = new XMLHttpRequest();
                    xhr.open('DELETE', apiURL + "Parkings/" + self.currentParking.Id)
                    xhr.send();
                    // boek verwijderen uit de lijst
                    self.parkings.forEach(function (parking, i) {
                        if (parking.Id == self.currentParking.Id) {
                            self.parkings.splice(i, 1);
                            return;
                        }
                    });
                },
            }
        })


    </script>
}

<h2>EEn titel</h2>

<article id="app" class="row">
    <header class="col-md-4">
        <h3>{{ message }}</h3>
        <nav>
            <ul class="list-group">
                <li v-for="parking in parkings" v-on:click="fetchParkingDetails(parking)" :class="getBookClass(parking)" style="cursor:pointer">
                    <span class="bookParkingNaam">{{ parking.ParkingNaam }}</span>
                    @*<span class="bookAuthorName">{{ book.AuthorName }}</span>*@
                </li>
            </ul>
        </nav>
    </header>

    <article v-if="currentParking" class="col-md-4">
        <h3>Details</h3>
        <div v-if="editMode" class="form-group">
            <table>
                <tr>
                    <td>Parking:</td>
                    <td><input v-model="currentParking.ParkingNaam" class="form-control"></td>
                </tr>
                @*<tr>
                    <td>Author:</td>
                    <td>
                        <select v-model="currentParking.AuthorId" v-on:change="changeAuthor" class="form-control">
                            <option v-for="author in authors" v-bind:value="author.Id">{{ author.Name }}</option>
                        </select>
                        @*<span>Selected: {{ currentBook.AuthorId }}</span>
                    </td>
                </tr>*@
                <tr>
                    <td>Genre:</td>
                    <td><input v-model="currentParking.Soort" class="form-control"></td>
                </tr>
                @*<tr>
                    <td>Price:</td>
                    <td><input v-model="currentBook.Price" class="form-control"></td>
                </tr>*@
            </table>
            <button v-on:click="save" class="btn btn-primary">Save</button>
        </div>
        <div v-else>
            <table cellpadding="8em">
                <tr>
                    <td>Title:</td>
                    <td class="bookTitle">{{ currentParking.ParkingNaam}}</td>
                </tr>
                @*<tr>
                    <td>Author:</td>
                    <td class="bookAuthorName">{{ currentBook.AuthorName}}</td>
                </tr>*@
                <tr>
                    <td>Genre:</td>
                    <td>{{ currentParking.Soort}}</td>
                </tr>
                @*<tr>
                    <td>Price:</td>
                    <td>{{ currentBook.Price}}</td>
                </tr>*@
            </table>
            <button v-on:click="toEditMode(true)" class="btn btn-primary">Edit</button>
            <button v-on:click="toEditMode(false)" class="btn btn-warning">New</button>
            <button v-on:click="deleteBook()" class="btn btn-danger" data-toggle="confirmation">Delete</button>
        </div>
    </article>
</article>
