// <auto-generated />
using EindwerkCarParkingCore.Data;
using EindwerkCarParkingCore.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace EindwerkCarParkingCore.Migrations
{
    [DbContext(typeof(EindwerkCarParkingContext))]
    [Migration("20180518104027_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EindwerkCarParkingLib.Eigenaar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EigenaarNaam")
                        .IsRequired();

                    b.Property<string>("Email");

                    b.HasKey("Id");

                    b.ToTable("Eigenaars");
                });

            modelBuilder.Entity("EindwerkCarParkingLib.Gemeente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("GemeenteNaam")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Gemeentes");
                });

            modelBuilder.Entity("EindwerkCarParkingLib.Land", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LandNaam")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Lands");
                });

            modelBuilder.Entity("EindwerkCarParkingLib.Locatie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("GemeenteId");

                    b.Property<int>("LandId");

                    b.Property<string>("Nr");

                    b.Property<string>("Straat")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("GemeenteId");

                    b.HasIndex("LandId");

                    b.ToTable("Locaties");
                });

            modelBuilder.Entity("EindwerkCarParkingLib.Parking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Bezet");

                    b.Property<int>("EigenaarId");

                    b.Property<int>("LocatieId");

                    b.Property<string>("ParkingNaam")
                        .IsRequired();

                    b.Property<int>("SoortId");

                    b.Property<int>("Totaal");

                    b.HasKey("Id");

                    b.HasIndex("EigenaarId");

                    b.HasIndex("LocatieId");

                    b.HasIndex("SoortId");

                    b.ToTable("Parkings");
                });

            modelBuilder.Entity("EindwerkCarParkingLib.Soort", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("SoortNaam")
                        .IsRequired();

                    b.Property<int>("TotaalId");

                    b.HasKey("Id");

                    b.HasIndex("TotaalId");

                    b.ToTable("Soorts");
                });

            modelBuilder.Entity("EindwerkCarParkingLib.Totaal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BezetteParkings");

                    b.Property<int>("MaxParkings");

                    b.HasKey("Id");

                    b.ToTable("Totaals");
                });

            modelBuilder.Entity("EindwerkCarParkingLib.Locatie", b =>
                {
                    b.HasOne("EindwerkCarParkingLib.Gemeente", "Gemeente")
                        .WithMany("Locaties")
                        .HasForeignKey("GemeenteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EindwerkCarParkingLib.Land", "Land")
                        .WithMany("Locaties")
                        .HasForeignKey("LandId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EindwerkCarParkingLib.Parking", b =>
                {
                    b.HasOne("EindwerkCarParkingLib.Eigenaar", "Eigenaar")
                        .WithMany("Parkings")
                        .HasForeignKey("EigenaarId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EindwerkCarParkingLib.Locatie", "Locatie")
                        .WithMany("Parkings")
                        .HasForeignKey("LocatieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EindwerkCarParkingLib.Soort", "Soort")
                        .WithMany("Parkings")
                        .HasForeignKey("SoortId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EindwerkCarParkingLib.Soort", b =>
                {
                    b.HasOne("EindwerkCarParkingLib.Totaal", "Totaal")
                        .WithMany("Soorts")
                        .HasForeignKey("TotaalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
