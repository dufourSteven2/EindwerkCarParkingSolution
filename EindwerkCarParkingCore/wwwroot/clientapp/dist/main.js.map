{"version":3,"sources":["webpack:///./ClientApp/$_lazy_route_resource lazy namespace object","webpack:///./ClientApp/app/Gemeentes/Gemeente.Component.ts","webpack:///./ClientApp/app/Gemeentes/Gemeente.component.html","webpack:///./ClientApp/app/Landen/Landen.Component.ts","webpack:///./ClientApp/app/Landen/Landen.component.html","webpack:///./ClientApp/app/ParkingLijst/ParkingList.Component.css","webpack:///./ClientApp/app/ParkingLijst/ParkingList.component.ts","webpack:///./ClientApp/app/ParkingLijst/parkingList.component.html","webpack:///./ClientApp/app/Services/GeocodingApiService.ts","webpack:///./ClientApp/app/Soorten/Soorten.Component.ts","webpack:///./ClientApp/app/Soorten/Soorten.component.html","webpack:///./ClientApp/app/app.component.html","webpack:///./ClientApp/app/app.component.ts","webpack:///./ClientApp/app/app.module.ts","webpack:///./ClientApp/app/shared/dataService.ts","webpack:///./ClientApp/app/shared/googleMap.Component.html","webpack:///./ClientApp/app/shared/googleMap.Component.ts","webpack:///./ClientApp/app/shared/googleMapComponent.css","webpack:///./ClientApp/environments/environment.ts","webpack:///./ClientApp/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./ClientApp/$$_lazy_route_resource lazy recursive\";","ï»¿import { Component, OnInit } from \"@angular/core\";\r\nimport { DataService } from \"../shared/dataService\";\r\nimport { IParking } from \"../shared/IParking\";\r\nimport { ILand } from \"../shared/ILand\";\r\nimport {IGemeente} from \"../shared/IGemeente\"\r\n\r\n@Component({\r\n    selector: \"Gemeentes\",\r\n    templateUrl: \"Gemeente.component.html\",\r\n    // styleUrls: [\"Landen.Component.css\"] //styles aangepast naar styleUrls\r\n})\r\n\r\nexport class Gemeentes implements OnInit\r\n{\r\n    PageTitle: string = 'Lijst steden';\r\n\r\n    public gemeentes: IGemeente[] = [];\r\n\r\n    constructor(private data: DataService) { }\r\n\r\n    ngOnInit(): void {\r\n        this.data.loadGemeentes()\r\n            .subscribe(succes => {\r\n                if (succes) {\r\n                    this.gemeentes = this.data.gemeentes;\r\n                }\r\n            })\r\n    }\r\n    //_ListFilter: string;\r\n    //get listFilter(): string {\r\n    //    return this._ListFilter;\r\n    //}\r\n    //set listFilter(value: string) {\r\n    //    this._ListFilter = value;\r\n    //    this.filteredGemeentes = this.listFilter ? this.perFormFilter(this.listFilter) : this.parkings;\r\n    //}\r\n    //filteredGemeentes: IGemeente[] = this.gemeentes;\r\n\r\n    //perFormFilter(filterBy: string): IGemeente[] {\r\n    //    filterBy = filterBy.toLocaleLowerCase();\r\n    //    return this.gemeentes.filter((gemeente: IGemeente) =>\r\n    //        gemeente.Land.toLocaleLowerCase().indexOf(filterBy) !== -1 ;\r\n\r\n    //}\r\n\r\n}\r\n","module.exports = \"\\r\\n<div>\\r\\n\\t<select>\\r\\n\\t\\t<option *ngFor=\\\"let G of gemeentes\\\" value=\\\"{{G.gemeenteNaam}}\\\">{{G.gemeenteNaam}}</option>\\r\\n\\t</select>\\r\\n</div>\"","ï»¿import { Component, OnInit } from \"@angular/core\";\r\nimport { DataService } from \"../shared/dataService\";\r\nimport { IParking } from \"../shared/IParking\";\r\nimport { ILand } from \"../shared/ILand\";\r\n\r\n@Component({\r\n    selector: \"Landen\",\r\n    templateUrl: \"Landen.component.html\",\r\n   // styleUrls: [\"Landen.Component.css\"] //styles aangepast naar styleUrls\r\n})\r\n\r\nexport class Landen implements OnInit {\r\n    PageTitle: string = 'Lijst Parkingen';\r\n\r\n    public Landen: ILand[] = [];\r\n    constructor(private data: DataService) { }\r\n\r\n    ngOnInit(): void {\r\n        this.data.loadLanden()\r\n            .subscribe(succes => {\r\n                if (succes) {\r\n                    this.Landen = this.data.landen;\r\n                }\r\n            })\r\n    }\r\n\r\n}\r\n","module.exports = \"<div>\\r\\n    <select >\\r\\n        <option *ngFor=\\\"let L of Landen\\\" value=\\\"{{L.landNaam}}\\\">{{L.landNaam}}</option>\\r\\n    </select>\\r\\n</div>\\r\\n\"","module.exports = \"div.parking.header{\\r\\n    font-size: large;\\r\\n}\\r\\n\\r\\ndiv.parking{\\r\\n    margin-top : 10px;\\r\\n}\\r\\n\\r\\n.table{\\r\\n    margin-top: 10px;\\r\\n}\\r\\n\\r\\n.tableparkinginfo{\\r\\n    padding : 1px;\\r\\n    font-size: 16px;\\r\\n}\\r\\n\"","ï»¿import { Component, OnInit } from \"@angular/core\";\r\nimport { DataService } from \"../shared/dataService\";\r\nimport { IParking } from \"../shared/IParking\";\r\nimport { Parking } from \"../shared/Parking\";\r\n\r\n@Component({\r\n    selector: \"parking-list\",\r\n  templateUrl : \"parkingList.component.html\",\r\n    styleUrls: [\"ParkingList.Component.css\"] //styles aangepast naar styleUrls\r\n})\r\n\r\nexport class ParkingList implements OnInit {\r\n    PageTitle: string = 'Lijst Parkings';\r\n    backGroundColor: string;\r\n    public parkings: IParking[] = [];\r\n\r\n    ngOnInit(): void {\r\n        this.data.loadParkings()\r\n            .subscribe(succes => {\r\n                if (succes) {\r\n                    this.parkings = this.data.parkings;\r\n                    this.filteredParkings = this.parkings;\r\n               \r\n                }\r\n            });\r\n    }\r\n   \r\n    filteredParkings: IParking[] = this.parkings;\r\n    _ListFilter : string;\r\n\r\n    get listFilter(): string\r\n    {\r\n        return this._ListFilter;\r\n    }\r\n    set listFilter(value: string)\r\n    {\r\n        this._ListFilter = value;\r\n        this.filteredParkings = this.listFilter ? this.perFormFilter(this.listFilter) : this.parkings;\r\n    }\r\n\r\n\r\n    constructor(private data: DataService) { } \r\n\r\n\r\n\r\n    perFormFilter(filterBy: string): IParking[]\r\n    {\r\n        filterBy = filterBy.toLocaleLowerCase();\r\n        return this.parkings.filter((parking: IParking) =>\r\n            parking.parkingNaam.toLocaleLowerCase().indexOf(filterBy) !== -1 ||\r\n            parking.landLandNaam.toLocaleLowerCase().indexOf(filterBy) !== -1||\r\n            parking.gemeenteGemeenteNaam.toLocaleLowerCase().indexOf(filterBy) !== -1 ||\r\n            parking.locatieStraat.toLocaleLowerCase().indexOf(filterBy) !== -1 ||\r\n            parking.soortSoortNaam.toLocaleLowerCase().indexOf(filterBy) !== -1);\r\n    }\r\n\r\n    //percentage : number = ((parking: Parking) =>\r\n    //    (parking.bezet / parking.totaal) * 100);\r\n\r\n    //percentage(): Number{\r\n    //    return 52\r\n        \r\n    //    //return this.parkings.entries((parking: Parking) =>\r\n    //    //    (parking.bezet / parking.totaal) * 100);\r\n\r\n    //}\r\n\r\n    //getColor(percentage) {\r\n    //    switch (percentage) {\r\n    //        case percentage >= 50:\r\n    //            return 'green';\r\n    //        case percentage <= 51 && percentage >= 75:\r\n    //            return 'yellow';\r\n    //        case percentage <= 76 && percentage >= 90:\r\n    //            return \"orange\";\r\n    //        case percentage <= 91 && percentage >= 99:\r\n    //            return \"Light-red\";\r\n    //        case percentage = 100:\r\n    //            return \"Dark-Red\";\r\n    //        case percentage < 100:\r\n    //            return \"Black\";\r\n\r\n\r\n    //    }\r\n    //}\r\n\r\n}\r\n\r\n","module.exports = \"<div class=\\\"parking\\\">\\r\\n    <div class=\\\"parking.header\\\">\\r\\n        {{PageTitle}}\\r\\n    </div>\\r\\n    <div>\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-md-2\\\">Zoeken: </div>\\r\\n            <div class=\\\"col-md-4\\\">\\r\\n                <input type=\\\"text\\\" [(ngModel)]=\\\"listFilter\\\" />\\r\\n            </div>\\r\\n        </div>   \\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-md-6\\\">\\r\\n                <h4>Filterd door: {{listFilter}}</h4>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"table-responsive\\\">\\r\\n            <table class=\\\"table\\\" *ngIf='parkings && parkings.length > 0'>\\r\\n                <thead>\\r\\n                    <tr>\\r\\n                        <th>Parkingnaam: </th>\\r\\n                        <th> Land: </th>\\r\\n                        <th> Gemeente: </th>\\r\\n                        <th>Straat: </th>\\r\\n                        <th>Nummer: </th>\\r\\n                        <th>Soort: </th>\\r\\n                        <th>Bezet: </th>\\r\\n                        <th> Aantal: </th>\\r\\n                        <th>Vrije plaatsen: </th>\\r\\n                        <th>Percentage bezet:</th>\\r\\n                        <th>Google Map</th>\\r\\n                       \\r\\n                    </tr>\\r\\n                </thead>\\r\\n                <tbody>\\r\\n                    <tr class=\\\"tableparkinginfo\\\" *ngFor=\\\"let p of filteredParkings\\\">\\r\\n                        <td>{{p.parkingNaam}} </td>\\r\\n                        <td>{{p.landLandNaam}}</td>\\r\\n                        <td>{{p.gemeenteGemeenteNaam}}</td>\\r\\n                        <td>{{p.locatieStraat}}</td>\\r\\n                        <td>{{p.locatieNummer}}</td>\\r\\n                        <td>{{p.soortSoortNaam}}</td>\\r\\n                        <td ng-model=\\\"bezet\\\">{{p.bezet}}</td>\\r\\n                        <td ng-model=\\\"Totaal\\\">{{p.totaal}}</td>\\r\\n                        <td>{{ p.totaal - p.bezet }}</td>\\r\\n                        <td>{{(p.bezet / p.totaal)*100}} %</td>\\r\\n                        <td>    \\r\\n                            <googleMap [straatNaam] = 'p.locatieStraat'\\r\\n                                       [locatienummer] ='p.locatieNummer'\\r\\n                                       [gemeente] =\\\"p.gemeenteGemeenteNaam\\\"\\r\\n                                       [land] =\\\"p.landLandNaam\\\"></googleMap>\\r\\n                        </td>\\r\\n                        \\r\\n                    </tr>\\r\\n                </tbody>\\r\\n            </table>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\"","ï»¿import { Injectable } from '@angular/core';\r\nimport { Http } from '@angular/http';\r\nimport { Observable } from 'rxjs';\r\nimport 'rxjs/add/operator/map';\r\n\r\n@Injectable()\r\nexport class GeocodingApiService {\r\n    API_KEY: string;\r\n    API_URL: string;\r\n\r\n    constructor(private http: Http) {\r\n        this.API_KEY = 'AIzaSyCeiTZY7jXETj0MpKuUbKwN_CqeUzv0v'\r\n        this.API_URL = `https://maps.googleapis.com/maps/api/geocode/json?key=${this.API_KEY}&address=`;\r\n    }\r\n\r\n    findFromAddress(adres: string): Observable<any> {\r\n        let compositeAddress = [adres];\r\n\r\n        if (adres) compositeAddress.push(adres);\r\n        \r\n\r\n        let url = `${this.API_URL}${compositeAddress.join(',')}`;\r\n\r\n        return this.http.get(url).map(response => <any>response.json());\r\n    }\r\n\r\n}","ï»¿import { Component, OnInit } from \"@angular/core\";\r\nimport { DataService } from \"../shared/dataService\";\r\nimport { IParking } from \"../shared/IParking\";\r\nimport { ISoort } from \"../shared/ISoort\";\r\n\r\n@Component({\r\n    selector: \"Soorten\",\r\n    templateUrl: \"Soorten.component.html\",\r\n    // styleUrls: [\"Landen.Component.css\"] //styles aangepast naar styleUrls\r\n})\r\n\r\nexport class Soorten implements OnInit {\r\n    PageTitle: string = 'Lijst Soorten';\r\n\r\n    public Soorten: ISoort[] = [];\r\n    constructor(private data: DataService) { }\r\n\r\n    ngOnInit(): void {\r\n        this.data.loadSoorten()\r\n            .subscribe(succes => {\r\n                if (succes) {\r\n                    this.Soorten = this.data.soorten;\r\n                }\r\n            })\r\n    }\r\n\r\n}\r\n","module.exports = \"<div>\\r\\n    <select>\\r\\n        <option *ngFor=\\\"let S of Soorten\\\" value=\\\"{{S.soortNaam}}\\\">{{S.soortNaam}}</option>\\r\\n    </select>\\r\\n</div>\"","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\r\\n\\r\\n<div>\\r\\n    <Landen class=\\\"col-md-2\\\"></Landen>\\r\\n    <Gemeentes class=\\\"col-md-4\\\"></Gemeentes>\\r\\n    <Soorten class=\\\"col-md-6\\\"></Soorten>\\r\\n</div>\\r\\n\\r\\n\\r\\n<div class=\\\"col-md-10\\\" >\\r\\n<parking-list></parking-list>\\r\\n</div>\"","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'the-parkings',\r\n    templateUrl: './app.component.html',\r\n    styles: []\r\n})\r\nexport class AppComponent {\r\n  \r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { HttpClientModule } from \"@angular/common/http\"; //////////////\r\nimport { FormsModule } from \"@angular/forms\";\r\nimport { AppComponent } from './app.component';\r\nimport { ParkingList } from \"./ParkingLijst/ParkingList.component\";\r\nimport { DataService } from './shared/dataService';\r\nimport { googleMapComponent } from './shared/googleMap.Component';\r\nimport { Landen } from './Landen/Landen.Component';\r\nimport { Gemeentes } from './Gemeentes/Gemeente.Component';\r\nimport { Soorten } from './Soorten/Soorten.Component';\r\nimport { AgmCoreModule } from '@agm/core';\r\nimport { GeocodingApiService } from './Services/GeocodingApiService';\r\n@NgModule({\r\n  declarations: [\r\n      AppComponent,\r\n      ParkingList,\r\n      Landen,\r\n      Gemeentes,\r\n      Soorten,\r\n      googleMapComponent,\r\n      \r\n  ],\r\n  imports: [\r\n      BrowserModule,\r\n      FormsModule,\r\n      HttpClientModule, /////////////////////:\r\n     AgmCoreModule.forRoot({\r\n         apiKey: 'AIzaSyCeiTZY7jXETj0MpKuUbKwN_CqeUzv0v-M'\r\n      }),\r\n\r\n  ],\r\n    providers: [\r\n        DataService, \r\n        GeocodingApiService\r\n    ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","ï»¿import { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs\";\r\nimport 'rxjs/add/operator/map';\r\nimport { IParking } from \"./IParking\";\r\nimport { ILand } from \"./ILand\";\r\nimport { Parking } from \"./Parking\";\r\nimport { IGemeente } from './IGemeente';\r\nimport { ISoort } from './ISoort';\r\n\r\n@Injectable()\r\nexport class DataService {\r\n\r\n    constructor(private http: HttpClient) { }\r\n\r\n    public parkings: IParking[] =[]; /*type safety */\r\n    public landen: ILand[] =[];\r\n    public gemeentes: IGemeente[] = [];\r\n    public soorten: ISoort[] = [];\r\n\r\n    loadParkings(): Observable<boolean> {\r\n        return this.http.get(\"/api/parkings\") // hier de weg naar de apiom parkings op te halen\r\n            .map((data: any[]) => {\r\n                this.parkings = data;\r\n                return true;\r\n            });\r\n    };\r\n\r\n    loadLanden(): Observable<boolean> {\r\n        return this.http.get(\"/api/landen\") // hier de weg naar de api om Landen op te halen\r\n            .map((data: any[]) => {\r\n                this.landen = data;\r\n                return true;\r\n            });\r\n    };\r\n\r\n    loadGemeentes(): Observable<boolean> {\r\n        return this.http.get(\"/api/gemeentes\") // hier de weg naar de api om Landen op te halen\r\n            .map((data: any[]) => {\r\n                this.gemeentes = data;\r\n                return true;\r\n            });\r\n    };\r\n\r\n    loadSoorten(): Observable<boolean> {\r\n        return this.http.get(\"/api/soorts\") // hier de weg naar de api om Landen op te halen\r\n            .map((data: any[]) => {\r\n                this.soorten = data;\r\n                return true;\r\n            });\r\n    };\r\n}","module.exports = \"<agm-map>\\r\\n    <agm-marker [latitude]=\\\"lat\\\" [longitude]=\\\"lng\\\"></agm-marker>\\r\\n</agm-map>\\r\\n<!--<div>{{adres}}</div>-->\"","ï»¿import { Component, Input, OnInit, OnChanges } from '@angular/core';\r\nimport { GeocodingApiService } from \"../Services/GeocodingApiService\";\r\n\r\n@Component({\r\n    selector: 'googleMap',\r\n    templateUrl: './googleMap.Component.html',\r\n    styleUrls: ['./googleMapComponent.css']\r\n})\r\n\r\nexport class googleMapComponent implements OnChanges {\r\n    lat: number;\r\n    lng: number;\r\n\r\n    constructor(private geocodingAPIService: GeocodingApiService) { }\r\n    @Input() straatNaam: string;\r\n    @Input() locatienummer: string;\r\n    @Input() gemeente: string;\r\n    @Input() land: string;\r\n\r\n\r\n    adres: string;\r\n\r\n    ngOnChanges(): void {\r\n        this.adres = this.straatNaam + \" \" + this.locatienummer + \",\"\r\n            + this.gemeente + \",\" + this.land;\r\n        this.updateLatLngFromAddress();\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    updateLatLngFromAddress() {\r\n        this.geocodingAPIService\r\n            .findFromAddress(this.adres)\r\n            .subscribe(response => {\r\n                if (response.status == 'OK') {\r\n                    this.lat = response.results[0].geometry.location.lat;\r\n                    this.lng = response.results[0].geometry.location.lng;\r\n                } else if (response.status == 'ZERO_RESULTS') {\r\n                    console.log('geocodingAPIService', 'ZERO_RESULTS', response.status);\r\n                } else {\r\n                    console.log('geocodingAPIService', 'Other error', response.status);\r\n                }\r\n            });\r\n    }\r\n}\r\n","module.exports = \"\\r\\nagm-map {\\r\\n    height: 150px;\\r\\n    width: 80px;\\r\\n}\\r\\n\"","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * In development mode, to ignore zone related error stack frames such as\r\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\r\n * import the following file, but please comment it out in production mode\r\n * because it will have performance impact when throw error\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.log(err));\r\n"],"sourceRoot":""}